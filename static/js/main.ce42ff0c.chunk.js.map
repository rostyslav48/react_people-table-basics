{"version":3,"sources":["Pages/Home.tsx","components/Loader/Loader.tsx","api.ts","types/ErrorMessage.ts","components/PeopleTable/TableLink.tsx","components/PeopleTable/PeopleTable.tsx","Pages/People.tsx","services/addParentsToPeople.tsx","App.tsx","Root.tsx","index.tsx"],"names":["Home","className","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","ErrorMessage","isMale","sex","TableLink","name","slug","classNames","to","PeopleTable","people","person","useParams","map","born","died","motherName","fatherName","mother","father","People","useState","setPeople","Default","errorMessage","setErrorMessage","isLoading","setIsLoading","isErrorMessageDisplayed","isTableDisplayed","length","isNoPeopleOnServer","useEffect","peopleFromServer","find","addParentsToPeople","catch","WentWrong","finally","isLinkActive","isActive","App","role","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ce42ff0c.chunk.js","sourcesContent":["export const Home = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export enum ErrorMessage {\n  Default = '',\n  WentWrong = 'Something went wrong',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nconst MALE_SEX = 'm';\nconst isMale = (sex: string) => {\n  return sex === MALE_SEX;\n};\n\ntype Props = {\n  name: string,\n  slug: string,\n  sex: string,\n};\n\nexport const TableLink: React.FC<Props> = ({ name, slug, sex }) => (\n  <td>\n    <Link\n      className={classNames({\n        'has-text-danger': !isMale(sex),\n      })}\n      to={`../${slug}`}\n    >\n      {name}\n    </Link>\n  </td>\n);\n","import React from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { TableLink } from './TableLink';\n\nconst EMPTY_FIELD = '-';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { person } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(({\n          slug,\n          sex,\n          name,\n          born,\n          died,\n          motherName,\n          fatherName,\n          mother,\n          father,\n        }) => (\n          <tr\n            key={slug}\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': slug === person,\n            })}\n          >\n            <TableLink\n              name={name}\n              sex={sex}\n              slug={slug}\n            />\n\n            <td>{sex}</td>\n            <td>{born}</td>\n            <td>{died}</td>\n            {mother\n              ? (\n                <TableLink\n                  name={mother.name}\n                  sex={mother.sex}\n                  slug={mother.slug}\n                />\n              )\n              : (\n                <td>{motherName || EMPTY_FIELD}</td>\n              )}\n\n            {father\n              ? (\n                <TableLink\n                  name={father.name}\n                  sex={father.sex}\n                  slug={father.slug}\n                />\n              )\n              : (\n                <td>{fatherName || EMPTY_FIELD}</td>\n              )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nimport { Loader } from '../components/Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { ErrorMessage } from '../types/ErrorMessage';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { addParentsToPeople } from '../services';\n\nexport const People = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState(ErrorMessage.Default);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const isErrorMessageDisplayed = !isLoading && errorMessage;\n  const isTableDisplayed = !isLoading && !errorMessage && people.length;\n  const isNoPeopleOnServer = !isLoading && !errorMessage && !people.length;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then((peopleFromServer) => (\n        setPeople(addParentsToPeople(peopleFromServer))\n      ))\n      .catch(() => setErrorMessage(ErrorMessage.WentWrong))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {isErrorMessageDisplayed && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              {errorMessage}\n            </p>\n          )}\n\n          {isTableDisplayed && (\n            <PeopleTable people={people} />\n          )}\n\n          {isNoPeopleOnServer && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport const addParentsToPeople = (people: Person[]): Person[] => {\n  return people.map(person => {\n    const father = people.find(({ name }) => person.fatherName === name);\n    const mother = people.find(({ name }) => person.motherName === name);\n\n    return ({\n      ...person,\n      father,\n      mother,\n    });\n  });\n};\n","import { NavLink, Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport classNames from 'classnames';\n\nconst isLinkActive = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  })\n);\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={isLinkActive} to=\"/\">\n            Home\n          </NavLink>\n\n          <NavLink\n            className={isLinkActive}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import {\n  Navigate, Route, HashRouter as Router, Routes,\n} from 'react-router-dom';\nimport { Home } from './Pages/Home';\nimport { People } from './Pages/People';\nimport { App } from './App';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<Home />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/people\">\n            <Route path=\":person?\" element={<People />} />\n          </Route>\n          <Route\n            path=\"*\"\n            element={<h1 className=\"title\">Page not found</h1>}\n          />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}